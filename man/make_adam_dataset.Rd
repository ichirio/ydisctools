% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_adam_dataset.R
\name{make_adam_dataset}
\alias{make_adam_dataset}
\title{Create an ADaM Dataset}
\usage{
make_adam_dataset(df, domain, adam_meta, xpt_path = NULL, meta_length = TRUE)
}
\arguments{
\item{df}{A data frame containing the input data to be transformed into an ADaM dataset.}

\item{domain}{A character string specifying the domain name (e.g., "ADSL", "ADAE").}

\item{adam_meta}{A list containing metadata for the ADaM dataset, including dataset-level and variable-level metadata.}

\item{xpt_path}{A character string specifying the directory path where the XPT file should be saved. Defaults to \code{NULL}, meaning no file will be written.}

\item{meta_length}{A logical value indicating whether to apply variable length metadata to the dataset. Defaults to \code{TRUE}.}
}
\value{
A transformed data frame representing the ADaM dataset, with metadata-driven labels, types, and ordering applied.
}
\description{
This function creates an ADaM (Analysis Data Model) dataset from a given input dataset (\code{df}) by applying metadata-driven transformations and optionally exporting it as an XPT file.
}
\details{
The function performs the following steps:
\enumerate{
\item Extracts domain-specific metadata for datasets and variables from the provided \code{adam_meta}.
\item Selects and arranges variables based on the metadata.
\item Applies metadata-driven transformations, including variable labels, types, and lengths.
\item Optionally writes the resulting dataset to an XPT file in the specified directory.
}
}
\examples{
# Example usage:
df <- tibble::tibble(
  USUBJID = c("01", "02"),
  AGE = c(34, 45),
  SEX = c("M", "F")
)

adam_meta <- list(
  datasets = tibble::tibble(
    dataset = c("ADSL"),
    key = c("USUBJID")
  ),
  variables = tibble::tibble(
    dataset = c("ADSL", "ADSL"),
    variable = c("USUBJID", "AGE"),
    label = c("Subject ID", "Age"),
    type = c("char", "num"),
    length = c(10, 3)
  )
)

result <- make_adam_dataset(df, domain = "ADSL", adam_meta = adam_meta)

}
